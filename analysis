

EE205
Homework 1
WeeklyCal Program Analysis

====	Brief Descriptions	=====
The WeeklyCal Program is a weekly appointment maker and tracker. It
contains the original Time and DaTime objects that were given to us,
along with some other objects we created to fill in the gaps.

The name object is a single representation for a person's name. It 
contains a std C++ string, which is typedef'd as a word. 

The Individual object is one layer above the name object, representing 
a whole person. For now, an individual only has two attributes: a first 
name and a last name. The individual class also contains operators
that were in the name class.

Above that, there is an Appoitment object-- this object ties together
the DaTime and Individual implementations together into one object. Since
the original homework spec called for an appointment to have both a 
time span and an individual that it is assigned to, it was necessary to 
make another object to tie them together.

Above that once more, we used the array container implementation that was
given in lab2, and used that to store appointments. Since it only contained
basic implmentations for containers, another object above was required.

The appcontainer object container all the necessary operations for the full
operations of the WeeklyCal program-- implementing a "sort as you insert".
It automatically sorts events by time once they are added to the container.
The appcontainer object uses an inheritence feature in C++ to automatically
inherit some of the functions of the container object.

Overall, we implemented as many C++ features as we could, utilizing default
parameters, consts, and overloading to make our code as object oriented as
we could.

Basic application help can be found in the WeeklyCal.man file.


==== Program limitations	=====
Due to time limitions of our implementation, due to programs, our program
is not particularly robust towards the end portions. Some of the objects 
such as the name class did not have a full run of testing, and therefore
do not implement much error checking at all.

A large problem in our program doesn is error checking-- not enough of it 
was done. There should have been some error checking every time something
was put set. 

Since error checking was not implemented at the beginning, it was much 
harder to implement it towards the end-- further making our code less 
robust.

Another large problem is the modularity towards the end-- of the 
appcontainer module as well as the main driver for the weeklycal program.

Most of our program limitions could have been prevented had teamwork
been better and had everyone contributed to the program in incremental 
steps, instead of the large additions and changes at the very end. 

A very notable limitation of the WeeklyCal program is that it does not
write to a file-- and therefore does not save appointments after the 
program exits. 

Ultimately, our program still has MANY limitations and still has a long way
to go. 
